#!/bin/env python3

import oksdbinterfaces
import click
import os
import json
import sys


@click.command()
@click.option('--src_id_offset', '-s', default=0,
              help='Offset to add to src_ids in the generated output')
@click.argument('jsonfile', type=click.Path(exists=True))
@click.argument('oksfile', default='')
def generate(jsonfile, oksfile, src_id_offset):
  """Simple script to convert a JSON readout map file to an OKS file."""

  group_name = os.path.basename(jsonfile).removesuffix(".json")
  if oksfile == '':
    oksfile =  group_name + ".data.xml"

  print(f"Converting RO map from {jsonfile} to OKS in {oksfile} offsetting src_ids by {src_id_offset}")

  with open(jsonfile) as f:
    jsonmap = json.loads(f.read())
    f.close()

  schemafiles = ["schema/coredal/dunedaq.schema.xml",
                 "schema/appdal/application.schema.xml",
                 "schema/appdal/fdmodules.schema.xml" 
                ]
  dal = oksdbinterfaces.dal.module('generated', schemafiles[2])
  db = oksdbinterfaces.Configuration("oksconfig")
  db.create_db(oksfile, schemafiles)

  group = []
  streams = []
  last_pars = None
  eth_streams_found = False
  flx_streams_found = False
  for entry in jsonmap:
    src_id = entry['src_id'] + src_id_offset
    if entry["kind"] == "eth":
      if not eth_streams_found:
        eth_streams_found = True
        nic_stats_dal = dal.NICStatsConf(f"nicStats-{group_name}")
        db.update_dal(nic_stats_dal)
        nic_config_dal = dal.NICInterfaceConfiguration(f"nicConfig-{group_name}",
                                                       stats_conf = nic_stats_dal)
        db.update_dal(nic_config_dal)

      pars = entry["parameters"]
      if last_pars != None:
        #print(f"streams in nic {pars['rx_mac']} = {len(streams)}")
        if pars["rx_mac"] != last_pars["rx_mac"]:
        #if len(streams) > 0:
          print(f"New nic adding nic {last_pars['rx_mac']} with id nic-{last_src_id}")
          nic_dal = dal.NICInterface(f"nic-{last_src_id}",
                                     rx_hostname = last_pars["rx_host"],
                                     rx_mac = last_pars["rx_mac"],
                                     rx_ip = last_pars["rx_ip"],
                                     rx_iface = last_pars["rx_iface"],
                                     contains = streams,
                                     configuration = nic_config_dal
                                     )
          db.update_dal(nic_dal)
          group.append(nic_dal)
          streams = []
      if pars != last_pars:
        # Only create a new dal object if the parameters are different to the last one
        stream_pars = dal.EthStreamParameters(f"pars-{src_id}",
                                              protocol = pars["protocol"],
                                              mode = pars["mode"],
                                              tx_hostname = pars["tx_host"],
                                              tx_mac = pars["tx_mac"],
                                              tx_ip = pars["tx_ip"],
                                              #lcore = pars["lcore"],
                                              #rx_queue = pars["rx_queue"]
                                              )

        db.update_dal(stream_pars)
        last_pars = pars
    elif entry["kind"] == "flx":
      flx_streams_found = True
      pars = entry["parameters"]
      if not last_pars == None:
        if pars["card"] !=  last_pars["card"] or pars["slr"] != last_pars["slr"]:
          print(f'Adding FelixInterface felix-{last_src_id} slr={last_pars["slr"]}')
          felix_dal = dal.FelixInterface(f"felix-{last_src_id}",
                                         card = last_pars["card"],
                                         slr = last_pars["slr"],
                                         contains = streams
                                         )
          db.update_dal(felix_dal)
          streams = []
      stream_pars = dal.FelixStreamParameters(f"flxpars-{src_id}",
                                              protocol = pars["protocol"],
                                              mode = pars["mode"],
                                              link = pars["link"]
                                            )
      db.update_dal(stream_pars)
      last_pars = pars
    else:
      raise RuntimeError(f'Unknown kind of readout {entry["kind"]}!')
    geo_id = entry["geo_id"]
    geo_dal = dal.GeoId(f"geioId-{src_id}",
                       detector_id = geo_id["det_id"],
                       crate_id = geo_id["crate_id"],
                       slot_id = geo_id["slot_id"],
                       stream_id = geo_id["stream_id"]
                       )
    db.update_dal(geo_dal)
    stream = dal.DROStreamConf(f"DROStream-{src_id}",
                               src_id = entry["src_id"],
                               stream_params = stream_pars,
                               geo_id = geo_dal
                               )
    db.update_dal(stream)
    streams.append(stream)
    last_src_id = src_id

  if eth_streams_found:
    print(f"Ending by adding nic {last_pars['rx_mac']} with id nic-{src_id}")
    nic_dal = dal.NICInterface(f"nic-{src_id}",
                               rx_hostname = last_pars["rx_host"],
                               rx_mac = last_pars["rx_mac"],
                               rx_ip = last_pars["rx_ip"],
                               rx_iface = last_pars["rx_iface"],
                               contains = streams,
                               configuration = nic_config_dal
                               )
    db.update_dal(nic_dal)
    group.append(nic_dal)
  if flx_streams_found and len(streams) > 0:
    print(f"Adding final FelixInterface felix-{src_id}")
    felix_dal = dal.FelixInterface(f"felix-{src_id}",
                                   card = last_pars["card"],
                                   slr = last_pars["slr"],
                                   contains = streams
                                   )
    db.update_dal(felix_dal)
                                   

  rogroup=dal.ReadoutGroup(group_name,
                           contains=group)
  db.update_dal(rogroup)
  db.commit()

if __name__ == '__main__':
  generate()
